const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto'); // –•–æ—Ç—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
const http = require('http'); // –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ health check
const { config, validateConfig } = require('./config'); // –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
validateConfig();

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const BOT_TOKEN = config.bot.token;
const VIRUSTOTAL_API_KEY = config.virustotal.apiKey;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
// –í–ê–ñ–ù–û: –î–ª—è Render.com, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ–±—Ö—É–∫–∏, polling: true –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å
// –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ long polling (–∫–∞–∫ —Å–µ–π—á–∞—Å), —Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è VirusTotal API v3
const VT_BASE_URL = config.virustotal.baseUrl;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
async function scanFile(filePath, fileName) {
    try {
        const form = new FormData();
        form.append('file', fs.createReadStream(filePath));
        
        const response = await axios.post(`${VT_BASE_URL}/files`, form, {
            headers: {
                ...form.getHeaders(),
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
async function scanUrl(url) {
    try {
        const form = new FormData();
        form.append('url', url);
        
        const response = await axios.post(`${VT_BASE_URL}/urls`, form, {
            headers: {
                ...form.getHeaders(),
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ URL:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
async function getIpReport(ip) {
    try {
        const response = await axios.get(`${VT_BASE_URL}/ip_addresses/${ip}`, {
            headers: {
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ IP:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
async function getAnalysisResult(analysisId) {
    try {
        const response = await axios.get(`${VT_BASE_URL}/analyses/${analysisId}`, {
            headers: {
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
function formatReport(data, type) {
    const stats = data.data.attributes.stats || {};
    const total = stats.harmless + stats.malicious + stats.suspicious + stats.undetected;
    
    let report = `üîç *–û—Ç—á–µ—Ç VirusTotal*\n\n`;
    report += `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n`;
    report += `‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: ${stats.harmless || 0}\n`;
    report += `‚ùå –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ: ${stats.malicious || 0}\n`;
    report += `‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: ${stats.suspicious || 0}\n`;
    report += `‚ùì –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${stats.undetected || 0}\n`;
    report += `üìà –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${total}\n\n`;
    
    if (type === 'ip') {
        const attributes = data.data.attributes;
        report += `üåê *IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
        report += `üìç –°—Ç—Ä–∞–Ω–∞: ${attributes.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        report += `üè¢ –í–ª–∞–¥–µ–ª–µ—Ü: ${attributes.as_owner || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        report += `üè∑Ô∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: ${attributes.reputation || 0}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø–∞—Å–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è—Ö
    if (data.data.attributes.scans) {
        const maliciousScans = Object.entries(data.data.attributes.scans)
            .filter(([_, scan]) => scan.detected && scan.result)
            .slice(0, 5);
            
        if (maliciousScans.length > 0) {
            report += `\nüö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:*\n`;
            maliciousScans.forEach(([engine, scan]) => {
                report += `‚Ä¢ ${engine}: ${scan.result}\n`;
            });
        }
    }
    
    return report;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP
function isValidIP(ip) {
    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return ipRegex.test(ip);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
function isValidURL(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, config.messages.welcome, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, config.messages.help, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
bot.onText(/\/status/, (msg) => {
    const chatId = msg.chat.id;
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    
    const statusMessage = `
ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*

‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${hours}—á ${minutes}–º ${seconds}—Å
üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB
üîó API VirusTotal: –ü–æ–¥–∫–ª—é—á–µ–Ω
üìä –í–µ—Ä—Å–∏—è Node.js: ${process.version}
üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}
    `;
    
    bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
bot.on('document', async (msg) => {
    const chatId = msg.chat.id;
    const file = msg.document;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if (file.file_size > config.virustotal.limits.maxFileSize) {
        bot.sendMessage(chatId, '‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 32MB');
        return;
    }
    
    const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const fileInfo = await bot.getFile(file.file_id);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const tempDir = config.files.tempDir;
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        const tempFilePath = path.join(tempDir, `${Date.now()}_${file.file_name}`);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const response = await axios({
            method: 'GET',
            url: fileUrl,
            responseType: 'stream'
        });
        
        const writer = fs.createWriteStream(tempFilePath);
        response.data.pipe(writer);
        
        await new Promise((resolve, reject) => {
            writer.on('finish', resolve);
            writer.on('error', reject);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
        await bot.editMessageText('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ VirusTotal...', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
        
        const scanResult = await scanFile(tempFilePath, file.file_name);
        const analysisId = scanResult.data.id;
        
        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await bot.editMessageText('‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
        
        let analysisComplete = false;
        let attempts = 0;
        const maxAttempts = config.timeouts.maxAnalysisTime / config.timeouts.analysisCheck; // 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 10 —Å–µ–∫—É–Ω–¥
        
        while (!analysisComplete && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, config.timeouts.analysisCheck));
            
            try {
                const analysisResult = await getAnalysisResult(analysisId);
                
                if (analysisResult.data.attributes.status === 'completed') {
                    analysisComplete = true;
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                    await bot.deleteMessage(chatId, processingMsg.message_id);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                    const report = formatReport(analysisResult, 'file');
                    await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
                    const reportUrl = `https://www.virustotal.com/gui/file/${analysisResult.data.id}/detection`;
                    await bot.sendMessage(chatId, `üîó [–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ VirusTotal](${reportUrl})`, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            }
            
            attempts++;
        }
        
        if (!analysisComplete) {
            await bot.editMessageText('‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(tempFilePath);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (URL –∏ IP)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
    if (!text || text.startsWith('/') || msg.document || msg.photo || msg.video) {
        return;
    }
    
    const trimmedText = text.trim();
    
    if (isValidURL(trimmedText)) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
        const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é URL...');
        
        try {
            const scanResult = await scanUrl(trimmedText);
            const analysisId = scanResult.data.id;
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await bot.editMessageText('‚è≥ –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞...', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
            
            let analysisComplete = false;
            let attempts = 0;
            const maxAttempts = 20;
            
            while (!analysisComplete && attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                try {
                    const analysisResult = await getAnalysisResult(analysisId);
                    
                    if (analysisResult.data.attributes.status === 'completed') {
                        analysisComplete = true;
                        
                        await bot.deleteMessage(chatId, processingMsg.message_id);
                        
                        const report = formatReport(analysisResult, 'url');
                        await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
                        
                        const reportUrl = `https://www.virustotal.com/gui/url/${analysisResult.data.id}/detection`;
                        await bot.sendMessage(chatId, `üîó [–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ VirusTotal](${reportUrl})`, { parse_mode: 'Markdown' });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ URL:', error);
                }
                
                attempts++;
            }
            
            if (!analysisComplete) {
                await bot.editMessageText('‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                });
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ URL:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
        
    } else if (isValidIP(trimmedText)) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IP
        const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é IP-–∞–¥—Ä–µ—Å...');
        
        try {
            const ipReport = await getIpReport(trimmedText);
            
            await bot.deleteMessage(chatId, processingMsg.message_id);
            
            const report = formatReport(ipReport, 'ip');
            await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
            
            const reportUrl = `https://www.virustotal.com/gui/ip-address/${trimmedText}/detection`;
            await bot.sendMessage(chatId, `üîó [–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ VirusTotal](${reportUrl})`, { parse_mode: 'Markdown' });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ IP:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ IP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
        
    } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        bot.sendMessage(chatId, config.messages.unknownFormat, { parse_mode: 'Markdown' });
    }
}); // <-- –ó–î–ï–°–¨ –ë–´–õ–ê –û–®–ò–ë–ö–ê: –õ–ò–®–ù–ò–ô –¢–ï–ö–°–¢ –ò –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ polling –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ VirusTotal Bot –∑–∞–ø—É—â–µ–Ω!');
console.log('üì° –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...');

// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –Ω–∞ Render
const server = http.createServer((req, res) => {
    if (req.url === '/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            service: 'VirusTotal Telegram Bot',
            uptime: process.uptime()
        }));
    } else if (req.url === '/') {
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>VirusTotal Telegram Bot</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                    .status { color: #28a745; font-size: 24px; margin: 20px 0; }
                    .info { color: #666; }
                </style>
            </head>
            <body>
                <h1>ü§ñ VirusTotal Telegram Bot</h1>
                <div class="status">‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç</div>
                <div class="info">
                    <p>–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</p>
                    <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime())} —Å–µ–∫—É–Ω–¥</p>
                    <p>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–æ–≤!</p>
                </div>
            </body>
            </html>
        `);
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('Not Found');
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üè• Health check –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/health`);
});
                    
