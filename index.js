const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Pella
const BOT_TOKEN = process.env.BOT_TOKEN;
const VIRUSTOTAL_API_KEY = process.env.VIRUSTOTAL_API_KEY;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è VirusTotal API v3
const VT_BASE_URL = 'https://www.virustotal.com/api/v3';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
async function scanFile(filePath, fileName) {
    try {
        const form = new FormData();
        form.append('file', fs.createReadStream(filePath));
        
        const response = await axios.post(`${VT_BASE_URL}/files`, form, {
            headers: {
                ...form.getHeaders(),
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
async function scanUrl(url) {
    try {
        const form = new FormData();
        form.append('url', url);
        
        const response = await axios.post(`${VT_BASE_URL}/urls`, form, {
            headers: {
                ...form.getHeaders(),
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ URL:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
async function getIpReport(ip) {
    try {
        const response = await axios.get(`${VT_BASE_URL}/ip_addresses/${ip}`, {
            headers: {
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ IP:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
async function getAnalysisResult(analysisId) {
    try {
        const response = await axios.get(`${VT_BASE_URL}/analyses/${analysisId}`, {
            headers: {
                'x-apikey': VIRUSTOTAL_API_KEY
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
function formatReport(data, type) {
    const stats = data.data.attributes.stats || {};
    const total = stats.harmless + stats.malicious + stats.suspicious + stats.undetected;
    
    let report = `üîç *–û—Ç—á–µ—Ç VirusTotal*\n\n`;
    report += `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n`;
    report += `‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: ${stats.harmless || 0}\n`;
    report += `‚ùå –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ: ${stats.malicious || 0}\n`;
    report += `‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: ${stats.suspicious || 0}\n`;
    report += `‚ùì –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${stats.undetected || 0}\n`;
    report += `üìà –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${total}\n\n`;
    
    if (type === 'ip') {
        const attributes = data.data.attributes;
        report += `üåê *IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
        report += `üìç –°—Ç—Ä–∞–Ω–∞: ${attributes.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        report += `üè¢ –í–ª–∞–¥–µ–ª–µ—Ü: ${attributes.as_owner || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        report += `üè∑Ô∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: ${attributes.reputation || 0}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø–∞—Å–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è—Ö
    if (data.data.attributes.scans) {
        const maliciousScans = Object.entries(data.data.attributes.scans)
            .filter(([_, scan]) => scan.detected && scan.result)
            .slice(0, 5);
            
        if (maliciousScans.length > 0) {
            report += `\nüö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:*\n`;
            maliciousScans.forEach(([engine, scan]) => {
                report += `‚Ä¢ ${engine}: ${scan.result}\n`;
            });
        }
    }
    
    return report;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP
function isValidIP(ip) {
    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return ipRegex.test(ip);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
function isValidURL(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VirusTotal Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã, —Å—Å—ã–ª–∫–∏ –∏ IP-–∞–¥—Ä–µ—Å–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã –∏ —É–≥—Ä–æ–∑—ã.

*–ß—Ç–æ —è —É–º–µ—é:*
üìÅ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–∞–π–ª—ã (–¥–æ 32MB)
üîó –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å URL-–∞–¥—Ä–µ—Å–∞
üåê –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ IP-–∞–¥—Ä–µ—Å

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    `;
    
    bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:*
‚Ä¢ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (.exe, .dll, .msi)
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (.pdf, .doc, .docx)
‚Ä¢ –ê—Ä—Ö–∏–≤—ã (.zip, .rar, .7z)
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (.jpg, .png, .gif)
‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 32MB
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: https://example.com
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: 8.8.8.8
    `;
    
    bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
bot.on('document', async (msg) => {
    const chatId = msg.chat.id;
    const file = msg.document;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (32MB –ª–∏–º–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ API)
    if (file.file_size > 32 * 1024 * 1024) {
        bot.sendMessage(chatId, '‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 32MB');
        return;
    }
    
    const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const fileInfo = await bot.getFile(file.file_id);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const tempDir = path.join(__dirname, 'temp');
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir);
        }
        
        const tempFilePath = path.join(tempDir, `${Date.now()}_${file.file_name}`);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const response = await axios({
            method: 'GET',
            url: fileUrl,
            responseType: 'stream'
        });
        
        const writer = fs.createWriteStream(tempFilePath);
        response.data.pipe(writer);
        
        await new Promise((resolve, reject) => {
            writer.on('finish', resolve);
            writer.on('error', reject);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
        await bot.editMessageText('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ VirusTotal...', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
        
        const scanResult = await scanFile(tempFilePath, file.file_name);
        const analysisId = scanResult.data.id;
        
        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await bot.editMessageText('‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
        
        let analysisComplete = false;
        let attempts = 0;
        const maxAttempts = 30; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        
        while (!analysisComplete && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 10000)); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            
            try {
                const analysisResult = await getAnalysisResult(analysisId);
                
                if (analysisResult.data.attributes.status === 'completed') {
                    analysisComplete = true;
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                    await bot.deleteMessage(chatId, processingMsg.message_id);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                    const report = formatReport(analysisResult, 'file');
                    await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
                    const reportUrl = `https://www.virustotal.com/gui/file/${analysisResult.data.id}/detection`;
                    await bot.sendMessage(chatId, `üîó [–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ VirusTotal](${reportUrl})`, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            }
            
            attempts++;
        }
        
        if (!analysisComplete) {
            await bot.editMessageText('‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(tempFilePath);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (URL –∏ IP)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
    if (!text || text.startsWith('/') || msg.document || msg.photo || msg.video) {
        return;
    }
    
    const trimmedText = text.trim();
    
    if (isValidURL(trimmedText)) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
        const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é URL...');
        
        try {
            const scanResult = await scanUrl(trimmedText);
            const analysisId = scanResult.data.id;
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await bot.editMessageText('‚è≥ –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞...', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
            
            let analysisComplete = false;
            let attempts = 0;
            const maxAttempts = 20;
            
            while (!analysisComplete && attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                try {
                    const analysisResult = await getAnalysisResult(analysisId);
                    
                    if (analysisResult.data.attributes.status === 'completed') {
                        analysisComplete = true;
                        
                        await bot.deleteMessage(chatId, processingMsg.message_id);
                        
                        const report = formatReport(analysisResult, 'url');
                        await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
                        
                        const reportUrl = `https://www.virustotal.com/gui/url/${analysisResult.data.id}/detection`;
                        await bot.sendMessage(chatId, `üîó [–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ VirusTotal](${reportUrl})`, { parse_mode: 'Markdown' });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ URL:', error);
                }
                
                attempts++;
            }
            
            if (!analysisComplete) {
                await bot.editMessageText('‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                    chat_id: chatId,
                    message_id: processingMsg.message_id
                });
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ URL:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
        
    } else if (isValidIP(trimmedText)) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IP
        const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é IP-–∞–¥—Ä–µ—Å...');
        
        try {
            const ipReport = await getIpReport(trimmedText);
            
            await bot.deleteMessage(chatId, processingMsg.message_id);
            
            const report = formatReport(ipReport, 'ip');
            await bot.sendMessage(chatId, report, { parse_mode: 'Markdown' });
            
            const reportUrl = `https://www.virustotal.com/gui/ip-address/${trimmedText}/detection`;
            await bot.sendMessage(chatId, `üîó [–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ VirusTotal](${reportUrl})`, { parse_mode: 'Markdown' });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ IP:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ IP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
        
    } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        bot.sendMessage(chatId, `
‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ üìÅ –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ üîó –í–∞–ª–∏–¥–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)
‚Ä¢ üåê IP-–∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
        `, { parse_mode: 'Markdown' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ polling –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ VirusTotal Bot –∑–∞–ø—É—â–µ–Ω!');
console.log('üì° –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...');
